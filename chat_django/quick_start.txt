Django Chat Application Documentation
================================

Quick Start Guide (Development)
-----------------------------
This guide is for developers who want to quickly test or contribute to the project.

Quick: 
initialize sqlite db:
$ python3 manage.py migrate

run dev:
$ uvicorn core.asgi:application --host 0.0.0.0 --port 8000
In prod use gunicorn - uvicorn itself is single worker process

To allow frontend via CORS, specify source in .env or core.settings.py. default is localhost:5173.





### Prerequisites
- Python 3.8 or higher
- PostgreSQL database (URL will be provided)
- Anthropic API key

### 1. Project Setup
The project comes with a virtual environment in `/workspace/chat_app/venv/`. 
If you're working in this environment:
```bash
# Activate existing virtual environment
cd /workspace/chat_app
source venv/bin/activate
```

If you need a fresh environment:
```bash
# Create new environment
python -m venv new_venv
source new_venv/bin/activate

# Install dependencies
pip install -r requirements.txt
```

### 2. Configuration
You need to set up environment variables for the application to work:

1. Copy the example configuration:
   ```bash
   cp .env.example .env
   ```

2. Edit `.env` with your values:
   ```bash
   # Required settings
   ANTHROPIC_API_KEY=your-api-key    # For chat functionality
   DATABASE_URL=your-postgres-url    # Provided database URL
   
   # Optional settings
   FRONTEND_URL=http://localhost:3000  # Only if developing frontend
   ```

### 3. Start the Server
```bash
# Start development server
python manage.py runserver

# Server will be available at http://localhost:8000
```

### 4. Quick Test
Test the chat endpoint:
```bash
# Register test user
curl -X POST "http://localhost:8000/auth/register/" \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com", "password":"testpass123"}'

# Copy the token from the response, then:
curl -X POST "http://localhost:8000/api/chat/" \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiZWJjZGQ4MjAtZTU3OS00NjIzLWI0MDItNzk2OTUxYzI3YzU1IiwiZW1haWwiOiJ0NDQ0ZXN0QGV4YW1wbGUuY29tIiwicm9sZSI6ImJhc2ljIiwidHlwZSI6ImFjY2VzcyIsImp0aSI6IjFhNDM0NGQ1LTBlZmYtNDA4My1iZGNmLWRkNGVjY2ExMWI2OSIsImV4cCI6MTczODI5MDczOH0.5trQ9FcxM4a28MGte3I2s4q-157bC-HoHFukxC9oYIg" \
  -H "Content-Type: application/json" \
  -d '{"title":"Test Chat", "content":"Hello!"}'
```

That's it! The server is running and ready for basic testing.

Detailed Documentation
--------------------
For more detailed setup and configuration:

### Database Management
The project uses PostgreSQL for data storage. For development:
1. Why you need it:
   - Stores user accounts, chat history, and messages
   - Required for the application to function

2. Configuration options:
   - Use provided database URL (recommended)
   - Set up local PostgreSQL instance
   - Use SQLite for testing (configure in settings.py)

3. Database migrations:
   ```bash
   # Only needed when:
   # - Setting up fresh database
   # - After model changes
   # - After pulling updates with model changes
   python manage.py migrate
   ```

### Admin Interface
The Django admin interface provides database management:

1. Creating admin account:
   ```bash
   # Only needed if you need admin access
   python manage.py createsuperuser
   ```

2. Accessing admin:
   - URL: http://localhost:8000/admin/
   - Use superuser credentials
   - Manage users, chats, messages

### Production Deployment
For production deployment, additional steps are required:

1. Security settings:
   - Set DEBUG=False
   - Configure allowed hosts
   - Set secure SSL/TLS settings
   - Configure proper CORS settings

2. Server options:
   ```bash
   # ASGI server (recommended)
   uvicorn core.asgi:application --host 0.0.0.0 --port 8000

   # Or with Gunicorn
   gunicorn -w 4 -k uvicorn.workers.UvicornWorker core.asgi:application
   ```

Project Structure
----------------
/chat_app/
├── core/                   # Main project directory
│   ├── settings.py        # Project settings
│   ├── urls.py           # Main URL routing
│   └── asgi.py           # ASGI application entry point
├── authentication/        # Authentication app
│   ├── models.py         # User model and related models
│   └── views.py          # Authentication views (Google OAuth)
├── chat/                 # Chat application
│   ├── models.py         # Chat models (Message, Chat, etc.)
│   └── views.py          # Chat views and SSE endpoints
└── requirements.txt      # Project dependencies

Key Components
-------------
1. Authentication Flow
   - Uses Google OAuth for user authentication
   - JWT tokens for session management
   - Custom User model with additional fields

2. Database Models
   - User: Extended Django user model
   - Chat: Stores chat sessions
   - Message: Stores individual messages
   - All models use UUIDs as primary keys for better scalability

3. API Endpoints
   - /auth/google/login/         # Google OAuth login
   - /auth/google/callback/      # OAuth callback
   - /api/chat/                  # Create new chat
   - /api/chat/<uuid>/messages/  # SSE endpoint for messages
   - /api/chat/<uuid>/send/      # Send message endpoint

4. Async Features
   - Uses Django's ASGI capabilities
   - SSE for real-time message streaming
   - Async database operations
   - Async chat processing pipeline

Deployment Notes
---------------
1. Local Development
   - Uses Django development server
   - Local PostgreSQL database
   - Environment variables in .env file

2. Heroku Deployment
   - Uses Gunicorn with workers
   - Heroku PostgreSQL addon
   - Environment variables in Heroku config

3. Apache Deployment
   - Uses mod_wsgi
   - Configured for both HTTP and HTTPS
   - Environment variables in Apache config

Security Considerations
---------------------
1. Authentication
   - JWT tokens with proper expiration
   - CSRF protection enabled
   - Secure cookie handling

2. Database
   - Parameterized queries only
   - Proper indexing for performance
   - Regular backups recommended

3. API Security
   - Rate limiting on all endpoints
   - Input validation and sanitization
   - CORS properly configured

Scaling Considerations
--------------------
1. Database
   - Indexes on frequently queried fields
   - Partitioning strategy for messages table
   - Connection pooling configured

2. Application
   - Stateless design for horizontal scaling
   - Caching strategy implemented
   - Async operations for better performance

3. Infrastructure
   - Load balancer ready
   - Static files on CDN
   - Redis for session storage (optional)

Development Guidelines
--------------------
1. Code Style
   - Follow PEP 8
   - Use type hints
   - Document complex functions

2. Testing
   - Write unit tests for models
   - Integration tests for API endpoints
   - Load tests for async features

3. Git Workflow
   - Feature branches
   - Pull request reviews
   - Semantic versioning

Maintenance
----------
1. Regular Tasks
   - Database cleanup
   - Log rotation
   - Security updates

2. Monitoring
   - Error tracking
   - Performance metrics
   - User analytics

3. Backup Strategy
   - Daily database backups
   - Configuration backups
   - Disaster recovery plan


   